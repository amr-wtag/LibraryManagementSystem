// <auto-generated />
using System;
using LibraryManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryManagementAPI.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("273e5125-6a23-41c9-9055-c209f2adac58"),
                            Author = "Tad Dietrich",
                            Category = "Technology",
                            CopiesAvailable = 15,
                            Title = "Atque non dicta."
                        },
                        new
                        {
                            Id = new Guid("38f0a3be-5175-4569-8751-616d5fd25b21"),
                            Author = "Esther Reinger",
                            Category = "Fiction",
                            CopiesAvailable = 13,
                            Title = "Quo consequuntur consequuntur."
                        },
                        new
                        {
                            Id = new Guid("c595c05c-b4b5-4763-957b-36980ce003e3"),
                            Author = "Lucinda Kshlerin",
                            Category = "Mystery",
                            CopiesAvailable = 2,
                            Title = "Temporibus est quam."
                        },
                        new
                        {
                            Id = new Guid("22a6ab54-1337-46d9-b984-5a25d91df843"),
                            Author = "Abdiel Mertz",
                            Category = "Mystery",
                            CopiesAvailable = 3,
                            Title = "Earum laboriosam consequuntur."
                        },
                        new
                        {
                            Id = new Guid("aded6b06-1dfb-4ff1-a888-5269c85a64de"),
                            Author = "Ottilie Shanahan",
                            Category = "Science",
                            CopiesAvailable = 9,
                            Title = "Quo sed sint."
                        },
                        new
                        {
                            Id = new Guid("bd6b5fab-1dbb-4aaf-bf75-abbdec206fbc"),
                            Author = "Maritza Muller",
                            Category = "Mystery",
                            CopiesAvailable = 7,
                            Title = "Nobis et vel."
                        },
                        new
                        {
                            Id = new Guid("0b31be93-452e-4242-a056-c3d4063574a4"),
                            Author = "Margaret Pfeffer",
                            Category = "History",
                            CopiesAvailable = 16,
                            Title = "Quia quia et."
                        },
                        new
                        {
                            Id = new Guid("936cec3e-d186-445f-b7e0-d2a1ce1d1b44"),
                            Author = "Maximilian Lakin",
                            Category = "Technology",
                            CopiesAvailable = 6,
                            Title = "Repellendus incidunt non."
                        },
                        new
                        {
                            Id = new Guid("e7348b37-7dbe-42f2-8f82-4dd9fee7dcb1"),
                            Author = "Antone Ernser",
                            Category = "History",
                            CopiesAvailable = 20,
                            Title = "Ducimus et necessitatibus."
                        },
                        new
                        {
                            Id = new Guid("c9a36236-6a74-4afa-b9b2-8da68d3a408c"),
                            Author = "Armani Gerhold",
                            Category = "Science",
                            CopiesAvailable = 12,
                            Title = "Quidem incidunt quibusdam."
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4755474f-ab36-4b71-9142-1c0d8fb6ec5b"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f7ebcc48-12af-405c-b2df-7d66b31264a3"),
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = new Guid("f7601214-d523-4f46-83d8-1834f9e990e4"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("216a2c9b-c087-4359-b837-bc2ccda7ebab"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dedf0a33-0671-4267-ab81-15edfc7da6bb",
                            CreatedAt = new DateTime(2025, 3, 26, 15, 5, 23, 912, DateTimeKind.Utc).AddTicks(7970),
                            Email = "Abbey.Roob52@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Phyllis Schumm",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABBEY.ROOB52@YAHOO.COM",
                            NormalizedUserName = "ROWENA.FRITSCH3",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ22CTtVJGr4ZIO5OMns8Sm4/rZV+WSGL9ozeUKvtPOyel2AEM4GOJdFsliKepZwOA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Rowena.Fritsch3"
                        },
                        new
                        {
                            Id = new Guid("24006aa5-5735-4af1-976f-d2ede1ba8dc7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "175f4ea2-722f-4b4c-ad0a-2d9df154cf36",
                            CreatedAt = new DateTime(2025, 3, 26, 15, 5, 23, 912, DateTimeKind.Utc).AddTicks(9340),
                            Email = "Korey_Rodriguez@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Delfina Monahan",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOREY_RODRIGUEZ@GMAIL.COM",
                            NormalizedUserName = "JACQUELYN63",
                            PasswordHash = "AQAAAAIAAYagAAAAENgfop/HRyjSw7r8ECcFAoTwvXnpeV2HXxOrXT0q/sG971GcAfG18Dj4kiXuDdfE5w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Jacquelyn63"
                        },
                        new
                        {
                            Id = new Guid("a8160966-6ac8-4b53-ba97-0fa91e18ce12"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a319905-b5d5-40a1-800e-ff14ee006d31",
                            CreatedAt = new DateTime(2025, 3, 26, 15, 5, 23, 912, DateTimeKind.Utc).AddTicks(9430),
                            Email = "Colby3@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Vicente Waelchi",
                            LockoutEnabled = false,
                            NormalizedEmail = "COLBY3@GMAIL.COM",
                            NormalizedUserName = "DARRON48",
                            PasswordHash = "AQAAAAIAAYagAAAAEMRKqP/kuzL65cs1efG0ajJdUzjBfk8sF6lcLJR79Euhvr+jHGX5q2klS6q4jjBmkA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Darron48"
                        },
                        new
                        {
                            Id = new Guid("a93d4f98-7058-462c-b350-2f26756771ac"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c5c2785b-34d7-4735-82a0-cfc3695ba692",
                            CreatedAt = new DateTime(2025, 3, 26, 15, 5, 23, 912, DateTimeKind.Utc).AddTicks(9500),
                            Email = "Eldred5@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Mack Hoeger",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELDRED5@HOTMAIL.COM",
                            NormalizedUserName = "JADE_PACOCHA",
                            PasswordHash = "AQAAAAIAAYagAAAAEIoC5fhd4o2R3e+irEj7C0bAraXkjQMCm5Oyj4I54zyA0aG6P6DKINJvNqnPWaDAyg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Jade_Pacocha"
                        },
                        new
                        {
                            Id = new Guid("cf11a5f5-84b6-489e-9d9a-786f53f810ea"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2a32e38-2311-4210-a231-2f4eea50a4ab",
                            CreatedAt = new DateTime(2025, 3, 26, 15, 5, 23, 912, DateTimeKind.Utc).AddTicks(9550),
                            Email = "Jairo20@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Maryse Kihn",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAIRO20@HOTMAIL.COM",
                            NormalizedUserName = "AURORE0",
                            PasswordHash = "AQAAAAIAAYagAAAAEGgzP/bXI3VlPKmfN1btE+mRYNyEKSI5jSL7tYh3WtKYSPAolEtstE7WIfO1CPGUGg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Aurore0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("216a2c9b-c087-4359-b837-bc2ccda7ebab"),
                            RoleId = new Guid("4755474f-ab36-4b71-9142-1c0d8fb6ec5b")
                        },
                        new
                        {
                            UserId = new Guid("24006aa5-5735-4af1-976f-d2ede1ba8dc7"),
                            RoleId = new Guid("f7ebcc48-12af-405c-b2df-7d66b31264a3")
                        },
                        new
                        {
                            UserId = new Guid("a8160966-6ac8-4b53-ba97-0fa91e18ce12"),
                            RoleId = new Guid("f7601214-d523-4f46-83d8-1834f9e990e4")
                        },
                        new
                        {
                            UserId = new Guid("a93d4f98-7058-462c-b350-2f26756771ac"),
                            RoleId = new Guid("f7601214-d523-4f46-83d8-1834f9e990e4")
                        },
                        new
                        {
                            UserId = new Guid("cf11a5f5-84b6-489e-9d9a-786f53f810ea"),
                            RoleId = new Guid("f7601214-d523-4f46-83d8-1834f9e990e4")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Transaction", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("Transactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
