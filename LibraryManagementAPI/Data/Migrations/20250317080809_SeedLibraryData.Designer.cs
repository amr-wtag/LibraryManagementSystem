// <auto-generated />
using System;
using LibraryManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryManagementAPI.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250317080809_SeedLibraryData")]
    partial class SeedLibraryData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("966edce6-22f5-47f4-9ff1-f1ee32ed999a"),
                            Author = "Effie Kunde",
                            Category = "Technology",
                            CopiesAvailable = 12,
                            Title = "Optio rerum amet."
                        },
                        new
                        {
                            Id = new Guid("3b474960-5512-4974-9c1c-722fa2e3fdc8"),
                            Author = "Krystel Nikolaus",
                            Category = "Fiction",
                            CopiesAvailable = 15,
                            Title = "Minus dolorem facere."
                        },
                        new
                        {
                            Id = new Guid("2f5798e9-d5e2-4d9b-8285-deedf798f6bb"),
                            Author = "Jazmyne Hartmann",
                            Category = "Technology",
                            CopiesAvailable = 17,
                            Title = "Quibusdam in repudiandae."
                        },
                        new
                        {
                            Id = new Guid("9bd5e1b2-779f-443d-b317-ee7fd30e3755"),
                            Author = "Elyse Rutherford",
                            Category = "Fiction",
                            CopiesAvailable = 14,
                            Title = "Vitae fugiat aliquid."
                        },
                        new
                        {
                            Id = new Guid("18d66652-d0d6-47bd-b6dd-9bfe0fadbf5b"),
                            Author = "Maybell Schmeler",
                            Category = "Technology",
                            CopiesAvailable = 12,
                            Title = "Non voluptatibus soluta."
                        },
                        new
                        {
                            Id = new Guid("4b67e5da-856c-4e56-a022-6da6050166f4"),
                            Author = "Makayla Buckridge",
                            Category = "Fiction",
                            CopiesAvailable = 18,
                            Title = "Beatae ut voluptas."
                        },
                        new
                        {
                            Id = new Guid("ffcf2d96-b1db-49b0-ab06-1dc6ac3d5956"),
                            Author = "Frederick Cummings",
                            Category = "Technology",
                            CopiesAvailable = 9,
                            Title = "Rem impedit reiciendis."
                        },
                        new
                        {
                            Id = new Guid("fc3bd105-b9da-49d2-8db4-4902e4a169b0"),
                            Author = "Gay Mosciski",
                            Category = "Science",
                            CopiesAvailable = 17,
                            Title = "Illum explicabo aut."
                        },
                        new
                        {
                            Id = new Guid("cac1c49d-1003-4eb6-9077-21ff36588e45"),
                            Author = "Rebeca Morar",
                            Category = "Technology",
                            CopiesAvailable = 9,
                            Title = "Non qui mollitia."
                        },
                        new
                        {
                            Id = new Guid("cb9f158b-c225-4a79-b9bc-6d3a57696da8"),
                            Author = "Alexandro Howe",
                            Category = "History",
                            CopiesAvailable = 14,
                            Title = "Libero cum tempore."
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("741f750d-db0c-4944-bec7-5ebae26d0368"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c0523089-04a6-4de6-bccd-6a2f0e03467c"),
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = new Guid("4ea0a66a-e099-414d-9ba7-7871561a155a"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e48540d-86ff-4921-88ad-ad71079ca66f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cedd7a38-b6ee-4851-b9e3-4ce383eba6ec",
                            Email = "Gabe.Gerhold66@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GABE.GERHOLD66@YAHOO.COM",
                            NormalizedUserName = "RYLEIGH.FRANECKI65",
                            PasswordHash = "AQAAAAIAAYagAAAAEOoj9zSB48yA+d4CJrU2Y0ZJ5tjAfHnDwYH2f4oZsXGqFsACkQmSYdVbnRLoUDM1Jg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ryleigh.Franecki65"
                        },
                        new
                        {
                            Id = new Guid("e04f65a1-5666-40d5-9d8e-4005c5876bb8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66f941db-1ead-4c93-885e-a3d6bfae00c0",
                            Email = "Brandt.Hoppe99@yahoo.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BRANDT.HOPPE99@YAHOO.COM",
                            NormalizedUserName = "RENE_GREENFELDER80",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTLcLlew5KHZn3pv6LDXTtm+hVu36flHLo5y3PQ+F+KTQOG0T58ByscAPzZTHElzA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Rene_Greenfelder80"
                        },
                        new
                        {
                            Id = new Guid("50c3ebb9-6536-4035-8dad-e351fdaebf29"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b7f50f3-9ae0-4279-a1d9-3e150d12f3c9",
                            Email = "Paolo12@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PAOLO12@GMAIL.COM",
                            NormalizedUserName = "ANTONETTE.ROWE72",
                            PasswordHash = "AQAAAAIAAYagAAAAELnnDfhJNpd23vCNzSC3RXOy7Wxwlt85PDq/73S3rTvbUhOLhwWFHGCcUoM4ghy7fQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Antonette.Rowe72"
                        },
                        new
                        {
                            Id = new Guid("a70bbc64-883f-4be4-94ce-c8796489e392"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c791de26-2065-4130-b3c4-8ebd8c7bbcfb",
                            Email = "Jaquelin_Tremblay@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JAQUELIN_TREMBLAY@HOTMAIL.COM",
                            NormalizedUserName = "CAROLINE.STOKES",
                            PasswordHash = "AQAAAAIAAYagAAAAEId5jZhSqYKZpHP5GkleaQetTHYihvMz9hhugET+R4z9LeTRf4vufo194p5SZYDEUg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Caroline.Stokes"
                        },
                        new
                        {
                            Id = new Guid("e78bc3a2-5db8-45b5-a946-2150885e9ecf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "860e15e6-fecd-414a-a975-5db0c8357f43",
                            Email = "Rupert_Thiel@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RUPERT_THIEL@HOTMAIL.COM",
                            NormalizedUserName = "ALESSANDRO_KLEIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHwU1ugBQ+h+mA+4aZ/cDzqBIxAcl8JrmCJYhItPEDx6xG0gASaCp85x3ET+pF/x1w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Alessandro_Klein"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Transaction", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("Transactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
