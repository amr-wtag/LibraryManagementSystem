// <auto-generated />
using System;
using LibraryManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryManagementAPI.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250407192948_AddTimestampsToEntities")]
    partial class AddTimestampsToEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementAPI.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f032fa8-75f9-4f1c-9ee9-b235eb5994fa"),
                            Name = "Syble Shanahan"
                        },
                        new
                        {
                            Id = new Guid("fd7c127d-1c40-4761-b80d-b7dd3a96292c"),
                            Name = "Chaz Sipes"
                        },
                        new
                        {
                            Id = new Guid("5f561b97-88fe-4c45-bdee-c29bba34de10"),
                            Name = "Lucie Pacocha"
                        },
                        new
                        {
                            Id = new Guid("6fe59e22-4f7b-4f8f-b944-82a15fd363aa"),
                            Name = "Kelly Sawayn"
                        },
                        new
                        {
                            Id = new Guid("185ff85c-0df8-4f6b-92f3-2272032cfd8e"),
                            Name = "Ryleigh Hegmann"
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c55a2f89-b009-405e-a058-2d4a72f6d957"),
                            CopiesAvailable = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Eius aut corrupti.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("446d7487-6cc2-47b1-88cb-b731b6b59eba"),
                            CopiesAvailable = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Facilis et doloremque.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("89f9ea1c-839b-4e85-be7e-4e5f08e7a4dd"),
                            CopiesAvailable = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Unde iure ratione.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4f0d47a0-9e10-4c75-a7b9-9e899b11d3ac"),
                            CopiesAvailable = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Non qui saepe.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c2160331-d638-4201-8999-830b4608cbd3"),
                            CopiesAvailable = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Temporibus omnis quia.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("58fa19cc-a939-458c-a1ed-5046fb300acc"),
                            CopiesAvailable = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Libero facilis maiores.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("23403e04-a6bf-4e7b-880c-84517092a8b0"),
                            CopiesAvailable = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Voluptatibus quia numquam.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2885d6ee-0336-4bde-a7f4-03cc7f3c5b66"),
                            CopiesAvailable = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Atque in maiores.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("879b8876-8aa8-43cc-a54c-4ffceeced272"),
                            CopiesAvailable = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Voluptatem odit nesciunt.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9b32fd11-6ee1-45b4-a305-d318e999c315"),
                            CopiesAvailable = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Officia dolores temporibus.",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookAuthor", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("c55a2f89-b009-405e-a058-2d4a72f6d957"),
                            AuthorId = new Guid("6fe59e22-4f7b-4f8f-b944-82a15fd363aa")
                        },
                        new
                        {
                            BookId = new Guid("c55a2f89-b009-405e-a058-2d4a72f6d957"),
                            AuthorId = new Guid("5f561b97-88fe-4c45-bdee-c29bba34de10")
                        },
                        new
                        {
                            BookId = new Guid("446d7487-6cc2-47b1-88cb-b731b6b59eba"),
                            AuthorId = new Guid("6fe59e22-4f7b-4f8f-b944-82a15fd363aa")
                        },
                        new
                        {
                            BookId = new Guid("446d7487-6cc2-47b1-88cb-b731b6b59eba"),
                            AuthorId = new Guid("5f561b97-88fe-4c45-bdee-c29bba34de10")
                        },
                        new
                        {
                            BookId = new Guid("89f9ea1c-839b-4e85-be7e-4e5f08e7a4dd"),
                            AuthorId = new Guid("0f032fa8-75f9-4f1c-9ee9-b235eb5994fa")
                        },
                        new
                        {
                            BookId = new Guid("89f9ea1c-839b-4e85-be7e-4e5f08e7a4dd"),
                            AuthorId = new Guid("6fe59e22-4f7b-4f8f-b944-82a15fd363aa")
                        },
                        new
                        {
                            BookId = new Guid("4f0d47a0-9e10-4c75-a7b9-9e899b11d3ac"),
                            AuthorId = new Guid("0f032fa8-75f9-4f1c-9ee9-b235eb5994fa")
                        },
                        new
                        {
                            BookId = new Guid("4f0d47a0-9e10-4c75-a7b9-9e899b11d3ac"),
                            AuthorId = new Guid("5f561b97-88fe-4c45-bdee-c29bba34de10")
                        },
                        new
                        {
                            BookId = new Guid("c2160331-d638-4201-8999-830b4608cbd3"),
                            AuthorId = new Guid("6fe59e22-4f7b-4f8f-b944-82a15fd363aa")
                        },
                        new
                        {
                            BookId = new Guid("c2160331-d638-4201-8999-830b4608cbd3"),
                            AuthorId = new Guid("185ff85c-0df8-4f6b-92f3-2272032cfd8e")
                        },
                        new
                        {
                            BookId = new Guid("58fa19cc-a939-458c-a1ed-5046fb300acc"),
                            AuthorId = new Guid("6fe59e22-4f7b-4f8f-b944-82a15fd363aa")
                        },
                        new
                        {
                            BookId = new Guid("58fa19cc-a939-458c-a1ed-5046fb300acc"),
                            AuthorId = new Guid("fd7c127d-1c40-4761-b80d-b7dd3a96292c")
                        },
                        new
                        {
                            BookId = new Guid("23403e04-a6bf-4e7b-880c-84517092a8b0"),
                            AuthorId = new Guid("5f561b97-88fe-4c45-bdee-c29bba34de10")
                        },
                        new
                        {
                            BookId = new Guid("23403e04-a6bf-4e7b-880c-84517092a8b0"),
                            AuthorId = new Guid("6fe59e22-4f7b-4f8f-b944-82a15fd363aa")
                        },
                        new
                        {
                            BookId = new Guid("2885d6ee-0336-4bde-a7f4-03cc7f3c5b66"),
                            AuthorId = new Guid("0f032fa8-75f9-4f1c-9ee9-b235eb5994fa")
                        },
                        new
                        {
                            BookId = new Guid("2885d6ee-0336-4bde-a7f4-03cc7f3c5b66"),
                            AuthorId = new Guid("6fe59e22-4f7b-4f8f-b944-82a15fd363aa")
                        },
                        new
                        {
                            BookId = new Guid("879b8876-8aa8-43cc-a54c-4ffceeced272"),
                            AuthorId = new Guid("6fe59e22-4f7b-4f8f-b944-82a15fd363aa")
                        },
                        new
                        {
                            BookId = new Guid("879b8876-8aa8-43cc-a54c-4ffceeced272"),
                            AuthorId = new Guid("185ff85c-0df8-4f6b-92f3-2272032cfd8e")
                        },
                        new
                        {
                            BookId = new Guid("9b32fd11-6ee1-45b4-a305-d318e999c315"),
                            AuthorId = new Guid("185ff85c-0df8-4f6b-92f3-2272032cfd8e")
                        },
                        new
                        {
                            BookId = new Guid("9b32fd11-6ee1-45b4-a305-d318e999c315"),
                            AuthorId = new Guid("6fe59e22-4f7b-4f8f-b944-82a15fd363aa")
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("c55a2f89-b009-405e-a058-2d4a72f6d957"),
                            GenreId = new Guid("904721d8-e2cd-4060-bd9f-def8a94a9bb6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("c55a2f89-b009-405e-a058-2d4a72f6d957"),
                            GenreId = new Guid("3646cbe1-1752-4778-b61a-9fe9aded449f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("446d7487-6cc2-47b1-88cb-b731b6b59eba"),
                            GenreId = new Guid("bcea001e-5ff7-4012-8a38-8e5ea4ea2ded"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("446d7487-6cc2-47b1-88cb-b731b6b59eba"),
                            GenreId = new Guid("56114d5b-79d6-4989-8dfe-9fad2ba903e3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("89f9ea1c-839b-4e85-be7e-4e5f08e7a4dd"),
                            GenreId = new Guid("904721d8-e2cd-4060-bd9f-def8a94a9bb6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("89f9ea1c-839b-4e85-be7e-4e5f08e7a4dd"),
                            GenreId = new Guid("bcea001e-5ff7-4012-8a38-8e5ea4ea2ded"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("4f0d47a0-9e10-4c75-a7b9-9e899b11d3ac"),
                            GenreId = new Guid("56114d5b-79d6-4989-8dfe-9fad2ba903e3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("4f0d47a0-9e10-4c75-a7b9-9e899b11d3ac"),
                            GenreId = new Guid("3646cbe1-1752-4778-b61a-9fe9aded449f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("c2160331-d638-4201-8999-830b4608cbd3"),
                            GenreId = new Guid("bcea001e-5ff7-4012-8a38-8e5ea4ea2ded"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("c2160331-d638-4201-8999-830b4608cbd3"),
                            GenreId = new Guid("3646cbe1-1752-4778-b61a-9fe9aded449f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("58fa19cc-a939-458c-a1ed-5046fb300acc"),
                            GenreId = new Guid("3646cbe1-1752-4778-b61a-9fe9aded449f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("58fa19cc-a939-458c-a1ed-5046fb300acc"),
                            GenreId = new Guid("56114d5b-79d6-4989-8dfe-9fad2ba903e3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("23403e04-a6bf-4e7b-880c-84517092a8b0"),
                            GenreId = new Guid("56114d5b-79d6-4989-8dfe-9fad2ba903e3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("23403e04-a6bf-4e7b-880c-84517092a8b0"),
                            GenreId = new Guid("3646cbe1-1752-4778-b61a-9fe9aded449f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("2885d6ee-0336-4bde-a7f4-03cc7f3c5b66"),
                            GenreId = new Guid("3646cbe1-1752-4778-b61a-9fe9aded449f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("2885d6ee-0336-4bde-a7f4-03cc7f3c5b66"),
                            GenreId = new Guid("904721d8-e2cd-4060-bd9f-def8a94a9bb6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("879b8876-8aa8-43cc-a54c-4ffceeced272"),
                            GenreId = new Guid("56114d5b-79d6-4989-8dfe-9fad2ba903e3"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("879b8876-8aa8-43cc-a54c-4ffceeced272"),
                            GenreId = new Guid("bcea001e-5ff7-4012-8a38-8e5ea4ea2ded"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("9b32fd11-6ee1-45b4-a305-d318e999c315"),
                            GenreId = new Guid("3646cbe1-1752-4778-b61a-9fe9aded449f"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookId = new Guid("9b32fd11-6ee1-45b4-a305-d318e999c315"),
                            GenreId = new Guid("904721d8-e2cd-4060-bd9f-def8a94a9bb6"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookReservations");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("376a9385-4f3f-46e1-baf0-ce7aa20e79d5"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("e7484a8a-a7c1-4e5e-a1d9-69601fedaf50"),
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = new Guid("3ddf3a5b-4567-4830-9043-f64360eb0d63"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e91fe1e5-dfd3-4f19-a7d9-e8b8ca211cde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4da9f68c-675e-49d9-9572-0f25452f9975",
                            CreatedAt = new DateTime(2025, 4, 7, 19, 29, 47, 868, DateTimeKind.Utc).AddTicks(4330),
                            Email = "Samantha.Schumm67@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Hettie Stark",
                            LockoutEnabled = false,
                            NormalizedEmail = "SAMANTHA.SCHUMM67@GMAIL.COM",
                            NormalizedUserName = "BRANDY75",
                            PasswordHash = "AQAAAAIAAYagAAAAEOBkTkAxRbAoBBz32adB6jwlv+rDsn44kJCePvyGhSRUjZBnOAvuTfjyZvBfItnv/w==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 4, 7, 19, 29, 47, 868, DateTimeKind.Utc).AddTicks(4330),
                            UserName = "Brandy75"
                        },
                        new
                        {
                            Id = new Guid("86bc63b1-709e-447f-9ef6-d477b9dfba57"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76210dc2-40df-419c-9c17-0e0ef54043af",
                            CreatedAt = new DateTime(2025, 4, 7, 19, 29, 47, 868, DateTimeKind.Utc).AddTicks(5690),
                            Email = "Linnie_Beer@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Demario Macejkovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "LINNIE_BEER@YAHOO.COM",
                            NormalizedUserName = "LOYAL_WALKER69",
                            PasswordHash = "AQAAAAIAAYagAAAAELsh1QMXHe40n+OIKA+jlLyeR/sJaB2eXKOP+dmKDuSx5yJuQeoUGySWaqKX49Swtw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 4, 7, 19, 29, 47, 868, DateTimeKind.Utc).AddTicks(5690),
                            UserName = "Loyal_Walker69"
                        },
                        new
                        {
                            Id = new Guid("a9ffb227-83ef-4abd-9969-1e07409c7015"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9806d890-6b65-4c1f-b3a6-5833b02d2a61",
                            CreatedAt = new DateTime(2025, 4, 7, 19, 29, 47, 868, DateTimeKind.Utc).AddTicks(5780),
                            Email = "Harmon55@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Demetrius Rath",
                            LockoutEnabled = false,
                            NormalizedEmail = "HARMON55@HOTMAIL.COM",
                            NormalizedUserName = "ALEXIS59",
                            PasswordHash = "AQAAAAIAAYagAAAAEAK2Kmpkfi+px89YtNtExIyTJxjAzOtzlWbWdvGzCNt5xUwMKh67lXX4rPvcX/qJkA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 4, 7, 19, 29, 47, 868, DateTimeKind.Utc).AddTicks(5780),
                            UserName = "Alexis59"
                        },
                        new
                        {
                            Id = new Guid("af55ee9b-1ae6-4fdf-b2d6-2a8521d224b8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7cb4c80-b084-412a-b31a-81ea34edffbc",
                            CreatedAt = new DateTime(2025, 4, 7, 19, 29, 47, 868, DateTimeKind.Utc).AddTicks(5850),
                            Email = "Christop_Rippin30@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Herbert Bartell",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRISTOP_RIPPIN30@YAHOO.COM",
                            NormalizedUserName = "KELLI_JACOBI31",
                            PasswordHash = "AQAAAAIAAYagAAAAELOfOBvBnvilITksr3IoDRF7LWYK37CrN+d18MMe3doVDSRK1VucnHF294bC0E7R0g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 4, 7, 19, 29, 47, 868, DateTimeKind.Utc).AddTicks(5850),
                            UserName = "Kelli_Jacobi31"
                        },
                        new
                        {
                            Id = new Guid("31820b48-1db0-4cd1-bdaa-d7b81bdfc809"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb7db01c-8de1-4ee3-a8e6-a012543705b2",
                            CreatedAt = new DateTime(2025, 4, 7, 19, 29, 47, 868, DateTimeKind.Utc).AddTicks(5930),
                            Email = "Antonietta27@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Hermina Cruickshank",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONIETTA27@HOTMAIL.COM",
                            NormalizedUserName = "ERIN.BOEHM31",
                            PasswordHash = "AQAAAAIAAYagAAAAEP+NqOFA1PIsi0aBCt6rZilOOwMU/VoLctGl4gQC3ov4J+QUZQK0uD6A4uUGTZ6rBw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 4, 7, 19, 29, 47, 868, DateTimeKind.Utc).AddTicks(5930),
                            UserName = "Erin.Boehm31"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e91fe1e5-dfd3-4f19-a7d9-e8b8ca211cde"),
                            RoleId = new Guid("376a9385-4f3f-46e1-baf0-ce7aa20e79d5")
                        },
                        new
                        {
                            UserId = new Guid("86bc63b1-709e-447f-9ef6-d477b9dfba57"),
                            RoleId = new Guid("e7484a8a-a7c1-4e5e-a1d9-69601fedaf50")
                        },
                        new
                        {
                            UserId = new Guid("a9ffb227-83ef-4abd-9969-1e07409c7015"),
                            RoleId = new Guid("3ddf3a5b-4567-4830-9043-f64360eb0d63")
                        },
                        new
                        {
                            UserId = new Guid("af55ee9b-1ae6-4fdf-b2d6-2a8521d224b8"),
                            RoleId = new Guid("3ddf3a5b-4567-4830-9043-f64360eb0d63")
                        },
                        new
                        {
                            UserId = new Guid("31820b48-1db0-4cd1-bdaa-d7b81bdfc809"),
                            RoleId = new Guid("3ddf3a5b-4567-4830-9043-f64360eb0d63")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookAuthor", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookGenre", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookReservation", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("BookReservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", "User")
                        .WithMany("BookReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("BookReservations");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Navigation("BookReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
