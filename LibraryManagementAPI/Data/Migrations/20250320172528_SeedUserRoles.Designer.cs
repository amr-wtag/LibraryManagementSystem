// <auto-generated />
using System;
using LibraryManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryManagementAPI.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250320172528_SeedUserRoles")]
    partial class SeedUserRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("697dec57-574f-4037-b1e6-a41fbf5b2e01"),
                            Author = "Deven Bashirian",
                            Category = "Technology",
                            CopiesAvailable = 11,
                            Title = "Minus accusamus aut."
                        },
                        new
                        {
                            Id = new Guid("f09fd31f-efe0-4fe9-b886-d189df4039c7"),
                            Author = "Dana Veum",
                            Category = "Mystery",
                            CopiesAvailable = 14,
                            Title = "Velit quibusdam ut."
                        },
                        new
                        {
                            Id = new Guid("36d10b89-d2d3-4155-a2a8-a05ef497b258"),
                            Author = "Bertrand Kuhic",
                            Category = "Technology",
                            CopiesAvailable = 4,
                            Title = "Nulla laudantium voluptatem."
                        },
                        new
                        {
                            Id = new Guid("76921129-fdd2-4b90-b120-a03eb95db241"),
                            Author = "Gia Abshire",
                            Category = "History",
                            CopiesAvailable = 13,
                            Title = "Autem modi rerum."
                        },
                        new
                        {
                            Id = new Guid("175acd1d-44c9-4af4-9bc1-4db359145824"),
                            Author = "Eino Corwin",
                            Category = "Mystery",
                            CopiesAvailable = 20,
                            Title = "Exercitationem veniam ea."
                        },
                        new
                        {
                            Id = new Guid("3c4e5293-4226-40df-9f7c-01033eb1ba29"),
                            Author = "Berneice Herzog",
                            Category = "Technology",
                            CopiesAvailable = 2,
                            Title = "Est maxime iusto."
                        },
                        new
                        {
                            Id = new Guid("f3134330-1fbc-44e0-a7c5-36f669875c0e"),
                            Author = "Aliza Altenwerth",
                            Category = "Science",
                            CopiesAvailable = 18,
                            Title = "Cupiditate in perferendis."
                        },
                        new
                        {
                            Id = new Guid("e8d253bb-7af8-41e0-addd-a5988dec1ade"),
                            Author = "Arnulfo Braun",
                            Category = "Mystery",
                            CopiesAvailable = 14,
                            Title = "Debitis laboriosam nam."
                        },
                        new
                        {
                            Id = new Guid("c04e84d9-0b7b-4511-89b1-5fbea306833f"),
                            Author = "Aurelia Mertz",
                            Category = "Fiction",
                            CopiesAvailable = 20,
                            Title = "Necessitatibus sit ut."
                        },
                        new
                        {
                            Id = new Guid("b4cd1db3-4a2c-48dd-901d-7b4c4df53d5b"),
                            Author = "Emerson Hyatt",
                            Category = "Science",
                            CopiesAvailable = 18,
                            Title = "Ullam voluptas distinctio."
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d6979a7-56cc-48a0-b317-e7cd33547820"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("a748ea20-0c11-4d1f-b6da-0e1de0969005"),
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = new Guid("30c12e6a-0c9d-44c4-8863-3865400bc960"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ddd07fc2-5d35-4c34-8272-7396d1330ac7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d777692-7497-48a3-b758-cf294f7a8090",
                            Email = "Sherman_Witting2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Jennie Okuneva",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHERMAN_WITTING2@GMAIL.COM",
                            NormalizedUserName = "WELDON.CRONIN97",
                            PasswordHash = "AQAAAAIAAYagAAAAEMNUW6/GXosMQXfQN8/agBx3IuyonuwEqpEzCU72/7a2XkL/uzXPcMBI6vK1DgnRmA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Weldon.Cronin97"
                        },
                        new
                        {
                            Id = new Guid("c08214e9-f074-4c40-8e76-4d28c4ff0636"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ad01700-d02f-42b1-8f6d-8d3a061a5bb7",
                            Email = "Gay.Quitzon68@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Leo Pfannerstill",
                            LockoutEnabled = false,
                            NormalizedEmail = "GAY.QUITZON68@HOTMAIL.COM",
                            NormalizedUserName = "TREVOR_RUSSEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEDGuHZi/9PbDJhmJ4793eXyaLSpoLWPJuKXRLjDiFqFzlYkjwfq4nCpQReGEHau4DA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Trevor_Russel"
                        },
                        new
                        {
                            Id = new Guid("b21f0a41-c1f8-423f-a9f5-12957a81be8f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd5c95b0-9815-4e4e-aea4-f0d643d72cc5",
                            Email = "Gilda97@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Fausto Berge",
                            LockoutEnabled = false,
                            NormalizedEmail = "GILDA97@HOTMAIL.COM",
                            NormalizedUserName = "CANDIDO81",
                            PasswordHash = "AQAAAAIAAYagAAAAEGVBb1rkQIbHzYGE19L6P/Qpf27B4f+Wogadw4G24uHhMfPBU4IyIhSU2w+S876ugQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Candido81"
                        },
                        new
                        {
                            Id = new Guid("5966de3f-86a4-4450-aeaf-f155b7d767c1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71148a8e-4618-40b3-bcd0-6c4f5212ff77",
                            Email = "Glenna.Reinger55@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Viva Barrows",
                            LockoutEnabled = false,
                            NormalizedEmail = "GLENNA.REINGER55@YAHOO.COM",
                            NormalizedUserName = "MADISYN.JAKUBOWSKI80",
                            PasswordHash = "AQAAAAIAAYagAAAAEEUpnIbHFM1SLxNZBYYk8ptDWhzyLsLVySFqStokQ8D+TDxyE5V3ixDUZ3R8C0BBtg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Madisyn.Jakubowski80"
                        },
                        new
                        {
                            Id = new Guid("18b951d5-2479-4216-badf-dae9b36ccfc3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dee5d354-d0aa-4876-a8fd-439babe3473d",
                            Email = "Orion95@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Annalise Dach",
                            LockoutEnabled = false,
                            NormalizedEmail = "ORION95@HOTMAIL.COM",
                            NormalizedUserName = "MAKENZIE_LUEILWITZ15",
                            PasswordHash = "AQAAAAIAAYagAAAAEH1rYjt8Ol0ywYmqzZOhTMciA79iIRevrxh41m8OumXxAkQoUpEk1x+PavfpChUfjg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Makenzie_Lueilwitz15"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ddd07fc2-5d35-4c34-8272-7396d1330ac7"),
                            RoleId = new Guid("9d6979a7-56cc-48a0-b317-e7cd33547820")
                        },
                        new
                        {
                            UserId = new Guid("c08214e9-f074-4c40-8e76-4d28c4ff0636"),
                            RoleId = new Guid("a748ea20-0c11-4d1f-b6da-0e1de0969005")
                        },
                        new
                        {
                            UserId = new Guid("b21f0a41-c1f8-423f-a9f5-12957a81be8f"),
                            RoleId = new Guid("30c12e6a-0c9d-44c4-8863-3865400bc960")
                        },
                        new
                        {
                            UserId = new Guid("5966de3f-86a4-4450-aeaf-f155b7d767c1"),
                            RoleId = new Guid("30c12e6a-0c9d-44c4-8863-3865400bc960")
                        },
                        new
                        {
                            UserId = new Guid("18b951d5-2479-4216-badf-dae9b36ccfc3"),
                            RoleId = new Guid("30c12e6a-0c9d-44c4-8863-3865400bc960")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Transaction", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("Transactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
