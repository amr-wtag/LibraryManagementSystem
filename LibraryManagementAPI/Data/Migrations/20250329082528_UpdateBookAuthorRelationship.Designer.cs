// <auto-generated />
using System;
using LibraryManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryManagementAPI.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250329082528_UpdateBookAuthorRelationship")]
    partial class UpdateBookAuthorRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementAPI.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e2474a7-8eaf-40d1-88ff-356e42e9497c"),
                            Name = "Kristoffer Pfannerstill"
                        },
                        new
                        {
                            Id = new Guid("2d9e31bd-9195-4cd1-b0cb-2cf0decb3991"),
                            Name = "Kailyn Daugherty"
                        },
                        new
                        {
                            Id = new Guid("9d0a4884-2530-419c-81c2-0fb1de96d0d9"),
                            Name = "Bernita Mueller"
                        },
                        new
                        {
                            Id = new Guid("261a3457-12d7-406b-97a1-174fb25f1fad"),
                            Name = "Trenton Swift"
                        },
                        new
                        {
                            Id = new Guid("74b496a8-146c-4a1a-a9e7-84dfc33f4111"),
                            Name = "Billie Maggio"
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31ca8b1c-4f89-4d86-963e-fa6d5ef9ea7a"),
                            Category = "History",
                            CopiesAvailable = 13,
                            Title = "Magnam eum autem."
                        },
                        new
                        {
                            Id = new Guid("c202adf8-58c6-4dbd-91c6-5efa4c76407f"),
                            Category = "Technology",
                            CopiesAvailable = 10,
                            Title = "Quia quam voluptatem."
                        },
                        new
                        {
                            Id = new Guid("d22e799a-7e4f-4c2d-81b6-8042c9c5aa68"),
                            Category = "Mystery",
                            CopiesAvailable = 20,
                            Title = "Quis error accusamus."
                        },
                        new
                        {
                            Id = new Guid("0ba4ea03-0062-4f1e-99da-0a8cd6f6c567"),
                            Category = "Technology",
                            CopiesAvailable = 2,
                            Title = "Qui ut quo."
                        },
                        new
                        {
                            Id = new Guid("49fe8fe4-1201-45f2-b01e-7d4359293c10"),
                            Category = "Fiction",
                            CopiesAvailable = 4,
                            Title = "Rem est pariatur."
                        },
                        new
                        {
                            Id = new Guid("3e4876a8-95ee-4d43-ba5a-5c8dd0ec3492"),
                            Category = "Mystery",
                            CopiesAvailable = 3,
                            Title = "Expedita molestiae quo."
                        },
                        new
                        {
                            Id = new Guid("138bd7ae-7719-4b55-9eda-258e8f23559b"),
                            Category = "Science",
                            CopiesAvailable = 16,
                            Title = "Exercitationem rerum maiores."
                        },
                        new
                        {
                            Id = new Guid("35a00c8d-8a9c-43e0-9bfa-9ad849530da2"),
                            Category = "Science",
                            CopiesAvailable = 15,
                            Title = "Dolore culpa natus."
                        },
                        new
                        {
                            Id = new Guid("04c03b38-4fcf-4092-9fb0-d25f738c8c79"),
                            Category = "Technology",
                            CopiesAvailable = 17,
                            Title = "Facilis autem ducimus."
                        },
                        new
                        {
                            Id = new Guid("df785ddc-2626-49a6-8241-9d88f8fbf201"),
                            Category = "History",
                            CopiesAvailable = 19,
                            Title = "A quaerat accusantium."
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookAuthor", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("31ca8b1c-4f89-4d86-963e-fa6d5ef9ea7a"),
                            AuthorId = new Guid("2d9e31bd-9195-4cd1-b0cb-2cf0decb3991")
                        },
                        new
                        {
                            BookId = new Guid("31ca8b1c-4f89-4d86-963e-fa6d5ef9ea7a"),
                            AuthorId = new Guid("74b496a8-146c-4a1a-a9e7-84dfc33f4111")
                        },
                        new
                        {
                            BookId = new Guid("c202adf8-58c6-4dbd-91c6-5efa4c76407f"),
                            AuthorId = new Guid("9d0a4884-2530-419c-81c2-0fb1de96d0d9")
                        },
                        new
                        {
                            BookId = new Guid("c202adf8-58c6-4dbd-91c6-5efa4c76407f"),
                            AuthorId = new Guid("2d9e31bd-9195-4cd1-b0cb-2cf0decb3991")
                        },
                        new
                        {
                            BookId = new Guid("d22e799a-7e4f-4c2d-81b6-8042c9c5aa68"),
                            AuthorId = new Guid("9d0a4884-2530-419c-81c2-0fb1de96d0d9")
                        },
                        new
                        {
                            BookId = new Guid("d22e799a-7e4f-4c2d-81b6-8042c9c5aa68"),
                            AuthorId = new Guid("2d9e31bd-9195-4cd1-b0cb-2cf0decb3991")
                        },
                        new
                        {
                            BookId = new Guid("0ba4ea03-0062-4f1e-99da-0a8cd6f6c567"),
                            AuthorId = new Guid("2d9e31bd-9195-4cd1-b0cb-2cf0decb3991")
                        },
                        new
                        {
                            BookId = new Guid("0ba4ea03-0062-4f1e-99da-0a8cd6f6c567"),
                            AuthorId = new Guid("74b496a8-146c-4a1a-a9e7-84dfc33f4111")
                        },
                        new
                        {
                            BookId = new Guid("49fe8fe4-1201-45f2-b01e-7d4359293c10"),
                            AuthorId = new Guid("74b496a8-146c-4a1a-a9e7-84dfc33f4111")
                        },
                        new
                        {
                            BookId = new Guid("49fe8fe4-1201-45f2-b01e-7d4359293c10"),
                            AuthorId = new Guid("2d9e31bd-9195-4cd1-b0cb-2cf0decb3991")
                        },
                        new
                        {
                            BookId = new Guid("3e4876a8-95ee-4d43-ba5a-5c8dd0ec3492"),
                            AuthorId = new Guid("2d9e31bd-9195-4cd1-b0cb-2cf0decb3991")
                        },
                        new
                        {
                            BookId = new Guid("3e4876a8-95ee-4d43-ba5a-5c8dd0ec3492"),
                            AuthorId = new Guid("8e2474a7-8eaf-40d1-88ff-356e42e9497c")
                        },
                        new
                        {
                            BookId = new Guid("138bd7ae-7719-4b55-9eda-258e8f23559b"),
                            AuthorId = new Guid("2d9e31bd-9195-4cd1-b0cb-2cf0decb3991")
                        },
                        new
                        {
                            BookId = new Guid("138bd7ae-7719-4b55-9eda-258e8f23559b"),
                            AuthorId = new Guid("74b496a8-146c-4a1a-a9e7-84dfc33f4111")
                        },
                        new
                        {
                            BookId = new Guid("35a00c8d-8a9c-43e0-9bfa-9ad849530da2"),
                            AuthorId = new Guid("9d0a4884-2530-419c-81c2-0fb1de96d0d9")
                        },
                        new
                        {
                            BookId = new Guid("35a00c8d-8a9c-43e0-9bfa-9ad849530da2"),
                            AuthorId = new Guid("8e2474a7-8eaf-40d1-88ff-356e42e9497c")
                        },
                        new
                        {
                            BookId = new Guid("04c03b38-4fcf-4092-9fb0-d25f738c8c79"),
                            AuthorId = new Guid("261a3457-12d7-406b-97a1-174fb25f1fad")
                        },
                        new
                        {
                            BookId = new Guid("04c03b38-4fcf-4092-9fb0-d25f738c8c79"),
                            AuthorId = new Guid("8e2474a7-8eaf-40d1-88ff-356e42e9497c")
                        },
                        new
                        {
                            BookId = new Guid("df785ddc-2626-49a6-8241-9d88f8fbf201"),
                            AuthorId = new Guid("261a3457-12d7-406b-97a1-174fb25f1fad")
                        },
                        new
                        {
                            BookId = new Guid("df785ddc-2626-49a6-8241-9d88f8fbf201"),
                            AuthorId = new Guid("2d9e31bd-9195-4cd1-b0cb-2cf0decb3991")
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookReservations");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8099f01-e5da-4a20-922a-31abc2913a11"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2eb9bb43-712c-4a6c-b177-e3b9615d5659"),
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = new Guid("e06d6c4c-60f0-45e9-a73e-7edb15cce456"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f15abfdd-7d66-4357-8f6a-6fe7ae39d913"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c0ac9435-afca-43f8-b4f3-5377c6ecf426",
                            CreatedAt = new DateTime(2025, 3, 29, 8, 25, 27, 745, DateTimeKind.Utc).AddTicks(3510),
                            Email = "Leonard.Welch72@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Jedediah Terry",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEONARD.WELCH72@HOTMAIL.COM",
                            NormalizedUserName = "ERVIN.HAMILL32",
                            PasswordHash = "AQAAAAIAAYagAAAAEEmkdichRt4G2Vft7Sxej3FQI5gvAbY1GMuHm5l3ez5XNJ8lpEoY+i7g0HxFwGIIuw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Ervin.Hamill32"
                        },
                        new
                        {
                            Id = new Guid("7a2eae60-ebf7-4dd4-a699-cbb3463edff9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4aa22ef-58e4-47a5-b2ab-9e00ec47b4ad",
                            CreatedAt = new DateTime(2025, 3, 29, 8, 25, 27, 745, DateTimeKind.Utc).AddTicks(5210),
                            Email = "Michale19@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Deven Willms",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHALE19@GMAIL.COM",
                            NormalizedUserName = "WALDO.ZBONCAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEPoCTsn2IGb9vUeGO23onMQ1Ai0JFseAO/ovy80tpg1QXIpQLkstrtpkTtWWjGonyw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Waldo.Zboncak"
                        },
                        new
                        {
                            Id = new Guid("526d6236-71f6-4f61-a6fe-6d68a96f6552"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79d8b145-1b84-4f55-b698-b942fc28738e",
                            CreatedAt = new DateTime(2025, 3, 29, 8, 25, 27, 745, DateTimeKind.Utc).AddTicks(5300),
                            Email = "Barton51@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Curtis Muller",
                            LockoutEnabled = false,
                            NormalizedEmail = "BARTON51@HOTMAIL.COM",
                            NormalizedUserName = "TESSIE_SCHINNER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKx+miouBFqtJtRVL8ZhQ8RgNvoyMPkd3NsGxPfJmDi7DtO02ffGC9al7omYi8Zq3g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Tessie_Schinner"
                        },
                        new
                        {
                            Id = new Guid("beb6ff40-70ba-41b8-a669-ed52b17d2dfa"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f26a0c8e-409b-45ae-b16e-c581adb3b6dc",
                            CreatedAt = new DateTime(2025, 3, 29, 8, 25, 27, 745, DateTimeKind.Utc).AddTicks(5380),
                            Email = "Dashawn.Lowe98@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Jocelyn Hand",
                            LockoutEnabled = false,
                            NormalizedEmail = "DASHAWN.LOWE98@GMAIL.COM",
                            NormalizedUserName = "JAYLEN73",
                            PasswordHash = "AQAAAAIAAYagAAAAENhk/KDSyasKvBzlg/SSGy+6mNdnVGZzBbV75s0K1xac3XmOLB0XgVdWGcNmliq0tQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Jaylen73"
                        },
                        new
                        {
                            Id = new Guid("f84cf6ef-8308-4642-9a7c-df9797a0f98a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1379add8-982e-48cf-b926-d64d39b9d7af",
                            CreatedAt = new DateTime(2025, 3, 29, 8, 25, 27, 745, DateTimeKind.Utc).AddTicks(5430),
                            Email = "Hillary.Kessler@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Javon Stanton",
                            LockoutEnabled = false,
                            NormalizedEmail = "HILLARY.KESSLER@HOTMAIL.COM",
                            NormalizedUserName = "MARK68",
                            PasswordHash = "AQAAAAIAAYagAAAAEE1uSU0EwFSCUWiuiETGAOt5S9W8M7won8riNVPDYqKoFFkYq9tIQEe/gkIaawbCmg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Mark68"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f15abfdd-7d66-4357-8f6a-6fe7ae39d913"),
                            RoleId = new Guid("d8099f01-e5da-4a20-922a-31abc2913a11")
                        },
                        new
                        {
                            UserId = new Guid("7a2eae60-ebf7-4dd4-a699-cbb3463edff9"),
                            RoleId = new Guid("2eb9bb43-712c-4a6c-b177-e3b9615d5659")
                        },
                        new
                        {
                            UserId = new Guid("526d6236-71f6-4f61-a6fe-6d68a96f6552"),
                            RoleId = new Guid("e06d6c4c-60f0-45e9-a73e-7edb15cce456")
                        },
                        new
                        {
                            UserId = new Guid("beb6ff40-70ba-41b8-a669-ed52b17d2dfa"),
                            RoleId = new Guid("e06d6c4c-60f0-45e9-a73e-7edb15cce456")
                        },
                        new
                        {
                            UserId = new Guid("f84cf6ef-8308-4642-9a7c-df9797a0f98a"),
                            RoleId = new Guid("e06d6c4c-60f0-45e9-a73e-7edb15cce456")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookAuthor", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookReservation", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("BookReservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", "User")
                        .WithMany("BookReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookReservations");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Navigation("BookReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
