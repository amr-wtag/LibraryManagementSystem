// <auto-generated />
using System;
using LibraryManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryManagementAPI.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250402200535_AddManyToManyBookGenre")]
    partial class AddManyToManyBookGenre
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementAPI.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9e7063d-e341-438f-8492-35021baa3399"),
                            Name = "Emelia Feeney"
                        },
                        new
                        {
                            Id = new Guid("303c84b0-2366-4a24-9d8f-dd6a83d1f3a5"),
                            Name = "Janiya Tillman"
                        },
                        new
                        {
                            Id = new Guid("a478ca95-4352-4324-8291-31cfed4df751"),
                            Name = "Blaise Skiles"
                        },
                        new
                        {
                            Id = new Guid("1553e0e4-2273-430f-bda5-fb6b1dbe4c2f"),
                            Name = "Frieda Crist"
                        },
                        new
                        {
                            Id = new Guid("35c36800-e157-4664-aa9c-8b8cb97256ca"),
                            Name = "Noble Bernier"
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50d00abb-2a4e-43ae-a8cb-96cbbfbe1c22"),
                            CopiesAvailable = 10,
                            Title = "Voluptatibus nostrum iusto."
                        },
                        new
                        {
                            Id = new Guid("52e7473c-ec5e-4770-b6ae-34a40e262286"),
                            CopiesAvailable = 9,
                            Title = "Velit est rem."
                        },
                        new
                        {
                            Id = new Guid("edf394b5-0819-4a59-a1f9-1f013e92e0ae"),
                            CopiesAvailable = 15,
                            Title = "Voluptates aut et."
                        },
                        new
                        {
                            Id = new Guid("09f80ef2-277f-496b-a9d0-824339dc70c3"),
                            CopiesAvailable = 19,
                            Title = "Tenetur magni sit."
                        },
                        new
                        {
                            Id = new Guid("2cf911e6-e97d-48cc-8ca5-5f32359e38e9"),
                            CopiesAvailable = 16,
                            Title = "Numquam sit laudantium."
                        },
                        new
                        {
                            Id = new Guid("0af53432-000d-49f7-9c46-75df165f5d34"),
                            CopiesAvailable = 17,
                            Title = "Est totam blanditiis."
                        },
                        new
                        {
                            Id = new Guid("dcac770a-ccb8-4ec7-90d6-a7116271fd30"),
                            CopiesAvailable = 12,
                            Title = "Et iste dolores."
                        },
                        new
                        {
                            Id = new Guid("17e8b7ae-e319-46e8-901f-d77441223493"),
                            CopiesAvailable = 15,
                            Title = "Et laborum dolores."
                        },
                        new
                        {
                            Id = new Guid("0f06e0c2-d611-4bd3-a87c-7a4d68d829f9"),
                            CopiesAvailable = 19,
                            Title = "Consequatur expedita tenetur."
                        },
                        new
                        {
                            Id = new Guid("a2659473-3c1f-4ae6-ae2c-8aff12d44070"),
                            CopiesAvailable = 1,
                            Title = "In totam qui."
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookAuthor", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("50d00abb-2a4e-43ae-a8cb-96cbbfbe1c22"),
                            AuthorId = new Guid("b9e7063d-e341-438f-8492-35021baa3399")
                        },
                        new
                        {
                            BookId = new Guid("50d00abb-2a4e-43ae-a8cb-96cbbfbe1c22"),
                            AuthorId = new Guid("1553e0e4-2273-430f-bda5-fb6b1dbe4c2f")
                        },
                        new
                        {
                            BookId = new Guid("52e7473c-ec5e-4770-b6ae-34a40e262286"),
                            AuthorId = new Guid("b9e7063d-e341-438f-8492-35021baa3399")
                        },
                        new
                        {
                            BookId = new Guid("52e7473c-ec5e-4770-b6ae-34a40e262286"),
                            AuthorId = new Guid("303c84b0-2366-4a24-9d8f-dd6a83d1f3a5")
                        },
                        new
                        {
                            BookId = new Guid("edf394b5-0819-4a59-a1f9-1f013e92e0ae"),
                            AuthorId = new Guid("a478ca95-4352-4324-8291-31cfed4df751")
                        },
                        new
                        {
                            BookId = new Guid("edf394b5-0819-4a59-a1f9-1f013e92e0ae"),
                            AuthorId = new Guid("1553e0e4-2273-430f-bda5-fb6b1dbe4c2f")
                        },
                        new
                        {
                            BookId = new Guid("09f80ef2-277f-496b-a9d0-824339dc70c3"),
                            AuthorId = new Guid("35c36800-e157-4664-aa9c-8b8cb97256ca")
                        },
                        new
                        {
                            BookId = new Guid("09f80ef2-277f-496b-a9d0-824339dc70c3"),
                            AuthorId = new Guid("303c84b0-2366-4a24-9d8f-dd6a83d1f3a5")
                        },
                        new
                        {
                            BookId = new Guid("2cf911e6-e97d-48cc-8ca5-5f32359e38e9"),
                            AuthorId = new Guid("35c36800-e157-4664-aa9c-8b8cb97256ca")
                        },
                        new
                        {
                            BookId = new Guid("2cf911e6-e97d-48cc-8ca5-5f32359e38e9"),
                            AuthorId = new Guid("303c84b0-2366-4a24-9d8f-dd6a83d1f3a5")
                        },
                        new
                        {
                            BookId = new Guid("0af53432-000d-49f7-9c46-75df165f5d34"),
                            AuthorId = new Guid("35c36800-e157-4664-aa9c-8b8cb97256ca")
                        },
                        new
                        {
                            BookId = new Guid("0af53432-000d-49f7-9c46-75df165f5d34"),
                            AuthorId = new Guid("b9e7063d-e341-438f-8492-35021baa3399")
                        },
                        new
                        {
                            BookId = new Guid("dcac770a-ccb8-4ec7-90d6-a7116271fd30"),
                            AuthorId = new Guid("a478ca95-4352-4324-8291-31cfed4df751")
                        },
                        new
                        {
                            BookId = new Guid("dcac770a-ccb8-4ec7-90d6-a7116271fd30"),
                            AuthorId = new Guid("b9e7063d-e341-438f-8492-35021baa3399")
                        },
                        new
                        {
                            BookId = new Guid("17e8b7ae-e319-46e8-901f-d77441223493"),
                            AuthorId = new Guid("35c36800-e157-4664-aa9c-8b8cb97256ca")
                        },
                        new
                        {
                            BookId = new Guid("17e8b7ae-e319-46e8-901f-d77441223493"),
                            AuthorId = new Guid("b9e7063d-e341-438f-8492-35021baa3399")
                        },
                        new
                        {
                            BookId = new Guid("0f06e0c2-d611-4bd3-a87c-7a4d68d829f9"),
                            AuthorId = new Guid("a478ca95-4352-4324-8291-31cfed4df751")
                        },
                        new
                        {
                            BookId = new Guid("0f06e0c2-d611-4bd3-a87c-7a4d68d829f9"),
                            AuthorId = new Guid("1553e0e4-2273-430f-bda5-fb6b1dbe4c2f")
                        },
                        new
                        {
                            BookId = new Guid("a2659473-3c1f-4ae6-ae2c-8aff12d44070"),
                            AuthorId = new Guid("a478ca95-4352-4324-8291-31cfed4df751")
                        },
                        new
                        {
                            BookId = new Guid("a2659473-3c1f-4ae6-ae2c-8aff12d44070"),
                            AuthorId = new Guid("303c84b0-2366-4a24-9d8f-dd6a83d1f3a5")
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookGenre", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("50d00abb-2a4e-43ae-a8cb-96cbbfbe1c22"),
                            GenreId = new Guid("90e38c2b-5ed5-4888-86b2-505a3f6a0844")
                        },
                        new
                        {
                            BookId = new Guid("50d00abb-2a4e-43ae-a8cb-96cbbfbe1c22"),
                            GenreId = new Guid("caa04c57-255d-4f1d-9153-8c5932bb39e8")
                        },
                        new
                        {
                            BookId = new Guid("52e7473c-ec5e-4770-b6ae-34a40e262286"),
                            GenreId = new Guid("caa04c57-255d-4f1d-9153-8c5932bb39e8")
                        },
                        new
                        {
                            BookId = new Guid("52e7473c-ec5e-4770-b6ae-34a40e262286"),
                            GenreId = new Guid("5b3863cc-9ca8-4d89-818a-000f8b643862")
                        },
                        new
                        {
                            BookId = new Guid("edf394b5-0819-4a59-a1f9-1f013e92e0ae"),
                            GenreId = new Guid("90e38c2b-5ed5-4888-86b2-505a3f6a0844")
                        },
                        new
                        {
                            BookId = new Guid("edf394b5-0819-4a59-a1f9-1f013e92e0ae"),
                            GenreId = new Guid("2b80fff8-74e0-4fcc-b903-527a0a6056ae")
                        },
                        new
                        {
                            BookId = new Guid("09f80ef2-277f-496b-a9d0-824339dc70c3"),
                            GenreId = new Guid("90e38c2b-5ed5-4888-86b2-505a3f6a0844")
                        },
                        new
                        {
                            BookId = new Guid("09f80ef2-277f-496b-a9d0-824339dc70c3"),
                            GenreId = new Guid("2b80fff8-74e0-4fcc-b903-527a0a6056ae")
                        },
                        new
                        {
                            BookId = new Guid("2cf911e6-e97d-48cc-8ca5-5f32359e38e9"),
                            GenreId = new Guid("2b80fff8-74e0-4fcc-b903-527a0a6056ae")
                        },
                        new
                        {
                            BookId = new Guid("2cf911e6-e97d-48cc-8ca5-5f32359e38e9"),
                            GenreId = new Guid("5b3863cc-9ca8-4d89-818a-000f8b643862")
                        },
                        new
                        {
                            BookId = new Guid("0af53432-000d-49f7-9c46-75df165f5d34"),
                            GenreId = new Guid("2b80fff8-74e0-4fcc-b903-527a0a6056ae")
                        },
                        new
                        {
                            BookId = new Guid("0af53432-000d-49f7-9c46-75df165f5d34"),
                            GenreId = new Guid("90e38c2b-5ed5-4888-86b2-505a3f6a0844")
                        },
                        new
                        {
                            BookId = new Guid("dcac770a-ccb8-4ec7-90d6-a7116271fd30"),
                            GenreId = new Guid("90e38c2b-5ed5-4888-86b2-505a3f6a0844")
                        },
                        new
                        {
                            BookId = new Guid("dcac770a-ccb8-4ec7-90d6-a7116271fd30"),
                            GenreId = new Guid("2b80fff8-74e0-4fcc-b903-527a0a6056ae")
                        },
                        new
                        {
                            BookId = new Guid("17e8b7ae-e319-46e8-901f-d77441223493"),
                            GenreId = new Guid("90e38c2b-5ed5-4888-86b2-505a3f6a0844")
                        },
                        new
                        {
                            BookId = new Guid("17e8b7ae-e319-46e8-901f-d77441223493"),
                            GenreId = new Guid("caa04c57-255d-4f1d-9153-8c5932bb39e8")
                        },
                        new
                        {
                            BookId = new Guid("0f06e0c2-d611-4bd3-a87c-7a4d68d829f9"),
                            GenreId = new Guid("5b3863cc-9ca8-4d89-818a-000f8b643862")
                        },
                        new
                        {
                            BookId = new Guid("0f06e0c2-d611-4bd3-a87c-7a4d68d829f9"),
                            GenreId = new Guid("90e38c2b-5ed5-4888-86b2-505a3f6a0844")
                        },
                        new
                        {
                            BookId = new Guid("a2659473-3c1f-4ae6-ae2c-8aff12d44070"),
                            GenreId = new Guid("caa04c57-255d-4f1d-9153-8c5932bb39e8")
                        },
                        new
                        {
                            BookId = new Guid("a2659473-3c1f-4ae6-ae2c-8aff12d44070"),
                            GenreId = new Guid("2b80fff8-74e0-4fcc-b903-527a0a6056ae")
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BookReservations");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8d2c9d0-a638-45c6-83c3-145375906820"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("3f619e20-e613-4c71-8b7f-6552f67cc09c"),
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = new Guid("0e0eacae-95b0-4330-92c3-623e8f94b324"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8d3b1c2-66a2-4602-a2b6-a57497d74de9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b9527bf-5c65-4dc7-ad89-910d2d44dfae",
                            CreatedAt = new DateTime(2025, 4, 2, 20, 5, 35, 95, DateTimeKind.Utc).AddTicks(5140),
                            Email = "Waylon.Rempel@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Felix Schoen",
                            LockoutEnabled = false,
                            NormalizedEmail = "WAYLON.REMPEL@GMAIL.COM",
                            NormalizedUserName = "VERONICA73",
                            PasswordHash = "AQAAAAIAAYagAAAAEJX5gjrBQIzBgPxLUDcyO6jWCym7vfU8fLC3XJ+nzzBLhUiF74KRyRA5vncS39BXlA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Veronica73"
                        },
                        new
                        {
                            Id = new Guid("04b46029-ea11-409c-a289-777e04f0fb6f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d4c5344-8dc1-4a09-bc84-2b4b778c26b4",
                            CreatedAt = new DateTime(2025, 4, 2, 20, 5, 35, 95, DateTimeKind.Utc).AddTicks(6650),
                            Email = "Terrance_Cole2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Terry Kessler",
                            LockoutEnabled = false,
                            NormalizedEmail = "TERRANCE_COLE2@GMAIL.COM",
                            NormalizedUserName = "JEFFRY.KING70",
                            PasswordHash = "AQAAAAIAAYagAAAAEAtGIBGDDZgCqqdzFKmMzLXX9sbS1FNCzTA8k/EMW7goK1fpfeYeXpTvqkDc2Y2RYg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Jeffry.King70"
                        },
                        new
                        {
                            Id = new Guid("da60d36e-3c79-4765-a59e-ac94612cec7f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1268f410-4e63-40b8-acd8-37ce9938fb6c",
                            CreatedAt = new DateTime(2025, 4, 2, 20, 5, 35, 95, DateTimeKind.Utc).AddTicks(6740),
                            Email = "Chelsea5@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Germaine Langworth",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHELSEA5@YAHOO.COM",
                            NormalizedUserName = "ESTEVAN37",
                            PasswordHash = "AQAAAAIAAYagAAAAENarH7wA9JcT4tC0AzuIAiGjro6ynjna5QShnUdhl4c1X9dMk37NPuQs9wvxOdQcyA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Estevan37"
                        },
                        new
                        {
                            Id = new Guid("706dd894-1a76-4624-9a16-b16f5c28a932"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d85476b3-dab1-4ef7-8570-e6db48ba564f",
                            CreatedAt = new DateTime(2025, 4, 2, 20, 5, 35, 95, DateTimeKind.Utc).AddTicks(6840),
                            Email = "Carey37@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Theresia Durgan",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAREY37@YAHOO.COM",
                            NormalizedUserName = "IRMA_DARE56",
                            PasswordHash = "AQAAAAIAAYagAAAAEP+/ZUZVihnXphz19lacgEufbrcEs8lc6Vlp9yVyyxix4t6IoNmG47uPX8qoyZwu/Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Irma_Dare56"
                        },
                        new
                        {
                            Id = new Guid("e931c25f-a9bb-4c9b-bc29-7f52e0cd3806"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef2e7974-2199-46f0-b1bb-b95a2bab46c3",
                            CreatedAt = new DateTime(2025, 4, 2, 20, 5, 35, 95, DateTimeKind.Utc).AddTicks(6900),
                            Email = "Elisha.Runolfsson@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Cary Thiel",
                            LockoutEnabled = false,
                            NormalizedEmail = "ELISHA.RUNOLFSSON@GMAIL.COM",
                            NormalizedUserName = "ANNA92",
                            PasswordHash = "AQAAAAIAAYagAAAAENgvBqCn1OBLmDFS0Z0hph9Vg6JmGSFo0/oRfBr4oKvoKXqcznF6kjc2A2Ii8t1wlQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Anna92"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e8d3b1c2-66a2-4602-a2b6-a57497d74de9"),
                            RoleId = new Guid("e8d2c9d0-a638-45c6-83c3-145375906820")
                        },
                        new
                        {
                            UserId = new Guid("04b46029-ea11-409c-a289-777e04f0fb6f"),
                            RoleId = new Guid("3f619e20-e613-4c71-8b7f-6552f67cc09c")
                        },
                        new
                        {
                            UserId = new Guid("da60d36e-3c79-4765-a59e-ac94612cec7f"),
                            RoleId = new Guid("0e0eacae-95b0-4330-92c3-623e8f94b324")
                        },
                        new
                        {
                            UserId = new Guid("706dd894-1a76-4624-9a16-b16f5c28a932"),
                            RoleId = new Guid("0e0eacae-95b0-4330-92c3-623e8f94b324")
                        },
                        new
                        {
                            UserId = new Guid("e931c25f-a9bb-4c9b-bc29-7f52e0cd3806"),
                            RoleId = new Guid("0e0eacae-95b0-4330-92c3-623e8f94b324")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookAuthor", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookGenre", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.BookReservation", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("BookReservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", "User")
                        .WithMany("BookReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookGenres");

                    b.Navigation("BookReservations");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Navigation("BookReservations");
                });
#pragma warning restore 612, 618
        }
    }
}
