// <auto-generated />
using System;
using LibraryManagementAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryManagementAPI.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20250322073045_CreatedAtInUser")]
    partial class CreatedAtInUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3568367-b316-496e-ae58-47499560db97"),
                            Author = "Zena Mosciski",
                            Category = "Fiction",
                            CopiesAvailable = 1,
                            Title = "Molestiae dolorem autem."
                        },
                        new
                        {
                            Id = new Guid("09033a51-67d7-40c9-811a-51365fa989f2"),
                            Author = "Gregg Jakubowski",
                            Category = "Mystery",
                            CopiesAvailable = 20,
                            Title = "Repellendus numquam sed."
                        },
                        new
                        {
                            Id = new Guid("9ca98890-171c-44b7-9482-7c8f9a69fd2c"),
                            Author = "Maryse Hammes",
                            Category = "History",
                            CopiesAvailable = 19,
                            Title = "Quasi consectetur voluptatibus."
                        },
                        new
                        {
                            Id = new Guid("86297a88-43f4-4963-92ed-802554f606d0"),
                            Author = "Harley Veum",
                            Category = "Mystery",
                            CopiesAvailable = 2,
                            Title = "Quibusdam iste consequatur."
                        },
                        new
                        {
                            Id = new Guid("a159236f-58bf-42b2-901b-79f6b5875855"),
                            Author = "Rod Ernser",
                            Category = "Fiction",
                            CopiesAvailable = 3,
                            Title = "Incidunt illum sit."
                        },
                        new
                        {
                            Id = new Guid("142d24b9-beec-4f34-8e67-3d311cfb0376"),
                            Author = "Anais Turcotte",
                            Category = "Technology",
                            CopiesAvailable = 9,
                            Title = "Commodi iste consequuntur."
                        },
                        new
                        {
                            Id = new Guid("fcd35020-a318-4350-bdd8-d1564dcb31f2"),
                            Author = "Bret Hessel",
                            Category = "Mystery",
                            CopiesAvailable = 3,
                            Title = "Consequatur neque enim."
                        },
                        new
                        {
                            Id = new Guid("14f506e9-9c4b-4c77-8ece-771e191ebd8a"),
                            Author = "Vladimir O'Connell",
                            Category = "Fiction",
                            CopiesAvailable = 7,
                            Title = "Harum consectetur ut."
                        },
                        new
                        {
                            Id = new Guid("4d63b558-84c9-44c0-af8a-22fdb5429071"),
                            Author = "Angel Steuber",
                            Category = "Science",
                            CopiesAvailable = 9,
                            Title = "Quis velit modi."
                        },
                        new
                        {
                            Id = new Guid("0a631973-511e-4ba4-8632-d21641fa6ff5"),
                            Author = "Burley Corkery",
                            Category = "Fiction",
                            CopiesAvailable = 19,
                            Title = "Quidem laborum laborum."
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4331196-74eb-45d5-b23c-ec002c95b3cd"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("911edb2c-9f0e-47cd-b310-8e754df9ac5c"),
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = new Guid("bf80c251-a791-41c4-b2a1-74be94b06e71"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("96fab421-0f34-4942-bf1f-9df6064ec1b4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49fdaeba-d4ec-4741-8813-9466a629dcf1",
                            CreatedAt = new DateTime(2025, 3, 22, 7, 30, 45, 86, DateTimeKind.Utc).AddTicks(5290),
                            Email = "Rollin.Farrell@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Marques Pagac",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROLLIN.FARRELL@GMAIL.COM",
                            NormalizedUserName = "MARIAN.KUNDE28",
                            PasswordHash = "AQAAAAIAAYagAAAAEFwULS4azGJZduxkKZWIEcF6GaET/YCDuhNmJXL5LoD8xMTOw3L9D1SHNI75VNjfMw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Marian.Kunde28"
                        },
                        new
                        {
                            Id = new Guid("0dad5871-3d48-4091-bce9-5186345d6d48"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a00d83b4-8d51-4c0a-b0d0-2bae5a9de88b",
                            CreatedAt = new DateTime(2025, 3, 22, 7, 30, 45, 86, DateTimeKind.Utc).AddTicks(6700),
                            Email = "Connor96@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Amari Schaefer",
                            LockoutEnabled = false,
                            NormalizedEmail = "CONNOR96@GMAIL.COM",
                            NormalizedUserName = "JESSE.CASSIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDvK4h8/StGCTz2tifp54gkVVY6uMec26KX90LeHmU1DJ2LmXpXE2yVz4aaSjxna4g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Jesse.Cassin"
                        },
                        new
                        {
                            Id = new Guid("646f76ab-4cdd-4009-a05d-c9eb6012784d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32bf4a85-5c8b-4f77-a968-011a5746864b",
                            CreatedAt = new DateTime(2025, 3, 22, 7, 30, 45, 86, DateTimeKind.Utc).AddTicks(6820),
                            Email = "Justina27@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Devyn Price",
                            LockoutEnabled = false,
                            NormalizedEmail = "JUSTINA27@GMAIL.COM",
                            NormalizedUserName = "LILA_BOGAN43",
                            PasswordHash = "AQAAAAIAAYagAAAAEBa5moX5kKT7+vLLH1zwpjoMU//NGkwTtgtWE7kSDCN4aQwv3QmaNXKA4OU745nNVA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Lila_Bogan43"
                        },
                        new
                        {
                            Id = new Guid("b96f2247-9ded-4863-829e-a48e36e21ca7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26777774-8288-412b-a587-2b3298ad6b10",
                            CreatedAt = new DateTime(2025, 3, 22, 7, 30, 45, 86, DateTimeKind.Utc).AddTicks(6910),
                            Email = "Sandy77@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Zula Ondricka",
                            LockoutEnabled = false,
                            NormalizedEmail = "SANDY77@GMAIL.COM",
                            NormalizedUserName = "EULALIA12",
                            PasswordHash = "AQAAAAIAAYagAAAAEDlyRq/23UKDNt6te5rHGLNNVRgmOiZ0KgVAQ4I18O0GR4yXz63xHHKVs5gsqmNjtA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Eulalia12"
                        },
                        new
                        {
                            Id = new Guid("8d4d5e1b-dc54-474d-8084-53745746a1dc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a7bfd11-4cc5-46ca-b8f3-1732a4d0bd63",
                            CreatedAt = new DateTime(2025, 3, 22, 7, 30, 45, 86, DateTimeKind.Utc).AddTicks(6970),
                            Email = "Deontae.Volkman84@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Arlene Donnelly",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEONTAE.VOLKMAN84@GMAIL.COM",
                            NormalizedUserName = "EUSEBIO85",
                            PasswordHash = "AQAAAAIAAYagAAAAEMUrCIoeGynUAxpUs063sJk2A6MbfZKdFDgq1VQgh54KT4CuFV1MUg/iFeeK6Ngfcg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Eusebio85"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("96fab421-0f34-4942-bf1f-9df6064ec1b4"),
                            RoleId = new Guid("e4331196-74eb-45d5-b23c-ec002c95b3cd")
                        },
                        new
                        {
                            UserId = new Guid("0dad5871-3d48-4091-bce9-5186345d6d48"),
                            RoleId = new Guid("911edb2c-9f0e-47cd-b310-8e754df9ac5c")
                        },
                        new
                        {
                            UserId = new Guid("646f76ab-4cdd-4009-a05d-c9eb6012784d"),
                            RoleId = new Guid("bf80c251-a791-41c4-b2a1-74be94b06e71")
                        },
                        new
                        {
                            UserId = new Guid("b96f2247-9ded-4863-829e-a48e36e21ca7"),
                            RoleId = new Guid("bf80c251-a791-41c4-b2a1-74be94b06e71")
                        },
                        new
                        {
                            UserId = new Guid("8d4d5e1b-dc54-474d-8084-53745746a1dc"),
                            RoleId = new Guid("bf80c251-a791-41c4-b2a1-74be94b06e71")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Transaction", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Book", "Book")
                        .WithMany("Transactions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LibraryManagementAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.Book", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("LibraryManagementAPI.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
